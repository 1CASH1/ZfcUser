{"name":"ZfcUser","body":"Introduction\r\n------------\r\n\r\nZfcUser is a user registration and authentication module for Zend Framework 2.\r\nOut of the box, ZfcUser works with Zend\\Db, however alternative storage adapter\r\nmodules are available (see below). ZfcUser provides the foundations for adding\r\nuser authentication and registration to your ZF2 site. It is designed to be very\r\nsimple and easily to extend.\r\n\r\nStorage Adapter Modules\r\n-----------------------\r\n\r\nBy default, ZfcUser ships with support for using Zend\\Db for persisting users.\r\nHowever, by installing an optional alternative storage adapter module, you can\r\ntake advantage of other methods of persisting users:\r\n\r\n- [ZfcUserDoctrineORM](https://github.com/ZF-Commons/ZfcUserDoctrineORM) - Doctrine2 ORM\r\n- [ZfcUserDoctrineMongoODM](https://github.com/ZF-Commons/ZfcUserDoctrineMongoODM) - Doctrine2 MongoDB ODM\r\n\r\nRequirements\r\n------------\r\n\r\n* [Zend Framework 2](https://github.com/zendframework/zf2) (latest master)\r\n* [ZfcBase](https://github.com/ZF-Commons/ZfcBase) (latest master).\r\n\r\nFeatures / Goals\r\n----------------\r\n\r\n* Authenticate via username, email, or both (can opt out of the concept of\r\n  username and use strictly email) [COMPLETE]\r\n* User registration [COMPLETE]\r\n* Forms protected against CSRF [COMPLETE]\r\n* Out-of-the-box support for Doctrine2 _and_ Zend\\Db [COMPLETE]\r\n* Registration form protected with CAPTCHA [IN PROGRESS] \\(Needs more options\\)\r\n* Robust event system to allow for extending [IN PROGRESS]\r\n* Support for additional authentication mechanisms via plugins (Google,\r\n  Facebook, LDAP, etc) [INCOMPLETE]\r\n* Optional E-mail address verification [INCOMPLETE]\r\n* Forgot Password [INCOMPLETE]\r\n* Provide ActionController plugin and view helper [INCOMPLETE]\r\n\r\nInstallation\r\n------------\r\n\r\n### Main Setup\r\n\r\n1. Install the [ZfcBase](https://github.com/ZF-Commons/ZfcBase) ZF2 module\r\n   by cloning it into `./vendor/` and enabling it in your\r\n   `application.config.php` file.\r\n2. Clone this project into your `./vendor/` directory and enable it in your\r\n   `application.config.php` file.\r\n3. Import the SQL schema located in `./vendor/ZfcUser/data/schema.sql`.\r\n4. Copy `./vendor/ZfcUser/config/module.zfcuser.config.php.dist` to\r\n   `./config/autoload/module.zfcuser.config.php`.\r\n\r\n### Post-Install: Doctrine2 ORM\r\n\r\nComing soon...\r\n\r\n### Post-Install: Doctrine2 MongoDB ODM\r\n\r\nComing soon...\r\n\r\n### Post-Install: Zend\\Db\r\n\r\n1. If you do not already have a PDO connection set up via DI, put the following\r\n   in `./config/autoload/database.config.php`:\r\n\r\n        <?php\r\n        // ./config/autoload/database.config.php\r\n\r\n        $mdb = array(\r\n            'dbname' => 'CHANGEME',\r\n            'user'   => 'CHANGEME',\r\n            'pass'   => 'CHANGEME',\r\n            'host'   => 'CHANGEME',\r\n        );\r\n\r\n        /**\r\n         * No need to edit below this line \r\n         */\r\n        return array(\r\n            'di' => array(\r\n                'instance' => array(\r\n                    'alias' => array(\r\n                        'masterdb' => 'PDO',\r\n                    ),\r\n                    'masterdb' => array(\r\n                        'parameters' => array(\r\n                            'dsn'            => \"mysql:dbname={$mdb['dbname']};host={$mdb['host']}\",\r\n                            'username'       => $mdb['user'],\r\n                            'passwd'         => $mdb['pass'],\r\n                            'driver_options' => array(PDO::MYSQL_ATTR_INIT_COMMAND => 'SET NAMES \\'UTF8\\''),\r\n                        ),\r\n                    ),\r\n                    'Zend\\Db\\Adapter\\Adapter' => array(\r\n                        'parameters' => array(\r\n                            'driver' => 'Zend\\Db\\Adapter\\Driver\\Pdo\\Pdo',\r\n                        ),\r\n                    ),\r\n                    'Zend\\Db\\Adapter\\Driver\\Pdo\\Pdo' => array(\r\n                        'parameters' => array(\r\n                            'connection' => 'Zend\\Db\\Adapter\\Driver\\Pdo\\Connection',\r\n                        ),\r\n                    ),\r\n                    'Zend\\Db\\Adapter\\Driver\\Pdo\\Connection' => array(\r\n                        'parameters' => array(\r\n                            'connectionInfo' => 'masterdb',\r\n                        ),\r\n                    ),\r\n                ),\r\n            ),\r\n        );\r\n\r\n2. Now, specify the DI alias for your PDO connection in\r\n   `./configs/autoload/module.zfcuser.config.php`, under the 'zend_db_adapter' setting.\r\n   If you created the `./config/autoload/database.config.php` file in the\r\n   previous step, the alias you'll specify is 'masterdb'.\r\n\r\nNavigate to http://yourproject/user and you should land on a login page.\r\n\r\nPassword Security\r\n-----------------\r\n\r\n**DO NOT CHANGE THE PASSWORD HASH SETTINGS FROM THEIR DEFAULTS** unless A) you\r\nhave done sufficient research and fully understand exactly what you are\r\nchanging, **AND** B) you have a **very** specific reason to deviate from the\r\ndefault settings.\r\n\r\nIf you are planning on changing the default password hash settings, please read\r\nthe following:\r\n\r\n- [PHP Manual: crypt() function](http://php.net/manual/en/function.crypt.php)\r\n- [Securely Storing Passwords in PHP by Adrian Schneider](http://www.syndicatetheory.com/labs/securely-storing-passwords-in-php)\r\n\r\nThe password hash settings may be changed at any time without invalidating\r\nexisting user accounts. Existing user passwords will be re-hashed automatically\r\non their next successful login.\r\n\r\n**WARNING:** Changing the default password hash settings can cause serious\r\nproblems such as making your hashed passwords more vulnerable to brute force\r\nattacks or making hashing so expesnive that login and registration is\r\nunacceptably slow for users and produces a large burden on your server(s). The\r\ndefault settings provided are a very reasonable balance between the two,\r\nsuitable for computing power in 2011.\r\n\r\nOptions\r\n-------\r\n\r\nThe ZfcUser module has some options to allow you to quickly customize the basic\r\nfunctionality. After installing ZfcUser, copy\r\n`./vendor/ZfcUser/config/module.zfcuser.config.php` to\r\n`./config/autoload/module.config.php` and change the values as desired.\r\n\r\nThe following options are available:\r\n\r\n- **user_model_class** - Name of Entity class to use. Useful for using your own\r\n  entity class instead of the default one provided. Default is\r\n  `ZfcUser\\Model\\User`.\r\n- **enable_username** - Boolean value, enables username field on the\r\n  registration form, and allows users to log in using their username _OR_ email\r\n  address.  Default is `false`.\r\n- **enable_display_name** - Boolean value, enables a display name field on the\r\n  registration form. Default value is `false`.\r\n- **enable_registration** - Boolean value, Determines if a user should be\r\n  allowed to register. Default value is `true`.\r\n- **require_activation** - Boolean value, require that the user verify their\r\n  email address to 'activate' their account. Default value is `false`. (Note,\r\n  this doesn't actually work yet, but defaults an 'active' field in the DB to\r\n  0.)\r\n- **login_after_registration** - Boolean value, automatically logs the user in\r\n  after they successfully register. Default value is `false`.\r\n- **registration_form_captcha** - Boolean value, determines if a captcha should\r\n  be utilized on the user registration form. Default value is `true`. (Note,\r\n  right now this only utilizes a weak Zend\\Text\\Figlet CAPTCHA, but I have plans\r\n  to make all Zend\\Captcha adapters work.)\r\n- **password_hash_algorithm** - Name of the hashing algorithm to use for\r\n  hashing.  Supported algorithms are `blowfish`, `sha512`, and `sha256`. Default\r\n  is `blowfish`.\r\n- **blowfish_cost** - Only used if `password_hash_algorithm` is set to\r\n  `blowfish`. This should be an integer between 4 and 31. The number represents\r\n  the base-2 logarithm of the iteration count used for hashing.  Default is `10`\r\n  (about 10 hashes per second on an i5).\r\n- **sha256_rounds** - Only used if `password_hash_algorithm` is set to `sha256`.\r\n  This should be an integer between 1000 and 999,999,999. The number represents\r\n  the iteration count used for hashing. Default is `5000`.\r\n- **sha512_rounds** - Only used if `password_hash_algorithm` is set to `sha512`.\r\n  This should be an integer between 1000 and 999,999,999. The number represents\r\n  the iteration count used for hashing. Default is `5000`.\r\n\r\nChanging Registration Captcha Element\r\n-------------------------------------\r\n\r\nBy default, the user registration uses the Figlet captcha engine.  This is\r\nbecause it's the only one that doesn't require API keys.  It's possible to change\r\nout the captcha engine with DI.  For example, to change to Recaptcha, you would\r\nadd this to one of your configuration files (global.config.php,\r\nmodule.config.php, or a dedicated recaptcha.config.php):\r\n\r\n    <?php\r\n    // ./config/autoload/recaptcha.config.php\r\n    return array(\r\n        'di'=> array(\r\n            'instance'=>array(\r\n                'alias'=>array(\r\n                    // OTHER ELEMENTS....\r\n                    'recaptcha_element' => 'Zend\\Form\\Element\\Captcha',\r\n                ),\r\n                'recaptcha_element' => array(\r\n                    'parameters' => array(\r\n                        'spec' => 'captcha',\r\n                        'options'=>array(\r\n                            'label'      => '',\r\n                            'required'   => true,\r\n                            'order'      => 500,\r\n                            'captcha'    => array(\r\n                                'captcha' => 'ReCaptcha',\r\n                                'privkey' => RECAPTCHA_PRIVATE_KEY,\r\n                                'pubkey'  => RECAPTCHA_PUBLIC_KEY,\r\n                            ),\r\n                        ),\r\n                    ),\r\n                ),\r\n                'ZfcUser\\Form\\Register' => array(\r\n                    'parameters' => array(\r\n                        'captcha_element'=>'recaptcha_element',\r\n                    ),\r\n                ),\r\n            ),\r\n        ),\r\n    );","tagline":"A generic user registration and authentication module for ZF2.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}